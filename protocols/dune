(* -*- tuareg -*- *)

let library = {|
(library
 (name wayland_protocols)
 (public_name wayland.protocols)
 (libraries wayland))|}

let pkgdatadir =
  let out = Jbuild_plugin.V1.run_and_read_lines "pkg-config --variable=pkgdatadir wayland-protocols" in
  match out with
  | [path] -> path
  | _ -> ""

let wayland_protocols =
  [
    `Stable ("xdg-shell", None, []);
    `Unstable ("linux-dmabuf", None, "v1", []);
    `Unstable ("primary-selection", Some "wp-primary-selection", "v1", []);
    `Unstable ("xdg-decoration", None, "v1", ["Xdg_shell_proto"]);
    `Unstable ("xdg-output", None, "v1", []);
  ]

let ( / ) = Filename.concat
let names f name alias =
  let map = String.map (function '-' -> '_' | c -> c) in
  match alias with None -> f name, map (f name) | Some alias -> f name, map (f alias)

let wayland_protocols_rule protocol =
  let deps, targets, mods = match protocol with
    | `Stable (n, alias, mods) ->
      let name, alias = names Fun.id n alias in
      pkgdatadir / "stable" / n / name ^ ".xml", alias, mods
    | `Staging (n, alias, v, mods) ->
      let name, alias = names (fun n -> Printf.sprintf "%s-%s" n v) n alias in
      pkgdatadir / "staging" / n / name  ^ ".xml", alias, mods
    | `Unstable (n, alias, v, mods) ->
      let name, alias = names (fun n -> Printf.sprintf "%s-unstable-%s" n v) n alias in
      pkgdatadir / "unstable" / n / name ^ ".xml", alias, mods
  in
  let mods = String.concat "," ("Wayland.Wayland_proto" :: mods) in
  Printf.sprintf {|
(rule
 (targets %s_client.ml
          %s_server.ml
          %s_proto.ml)
 (action (run %%{bin:wayland-scanner-ocaml} --open %s %s)))|}
    targets targets targets mods deps

let protocols =
  [
    `Stable ("gtk-primary-selection", None, []);
    `Stable ("server-decoration", None, []);
    `Stable ("wayland-drm", Some "drm", []);
    `Unstable ("wlr-screencopy", None, "v1", []);
  ]

let protocols_rule protocol =
  let deps, targets, mods = match protocol with
    | `Stable (n, alias, mods) ->
      let n, alias = names Fun.id n alias in n, alias, mods
    | `Unstable (n, alias, v, mods) ->
      let n, alias = names (fun n -> Printf.sprintf "%s-unstable-%s" n v) n alias in
      n, alias, mods
  in
  let mods = String.concat "," ("Wayland.Wayland_proto" :: mods) in
  Printf.sprintf {|
(rule
 (targets %s_client.ml
          %s_server.ml
          %s_proto.ml)
 (deps %s.xml)
 (action (run %%{bin:wayland-scanner-ocaml} --open %s %%{deps})))|}
    targets targets targets deps mods

let rules =
  Printf.sprintf "%s\n%s\n%s\n"
    library
    (String.concat "\n" (List.map wayland_protocols_rule wayland_protocols))
    (String.concat "\n" (List.map protocols_rule protocols))

let () = Jbuild_plugin.V1.send rules
